


BinaryTreeNode<int>* buildTreeHelper(int *preorder,int *inorder,int Ins,int Ps,int Ie,int Pe)
{                                             
  if(Ins>Ie)
    return NULL;
  int rootData=preorder[Ps];
  int rootIndex=-1;
  for(int i=Ins;i<=Ie;i++)
  {
    if(inorder[i]==rootData)
    {
      rootIndex=i;
      break;
    }
  }
  int inls=Ins;
  int inle=rootIndex-1;
  int inrs=rootIndex+1;
  int inre=Ie;
  int pls=Ps+1;
  int ple=inle-inls+pls;
  int prs=ple+1;
  int pre=Pe;
  BinaryTreeNode<int>* root=new BinaryTreeNode<int>(rootData);
  root->left=buildTreeHelper(preorder,inorder,inls,pls,inle,ple);
  root->right=buildTreeHelper(preorder,inorder,inrs,prs,inre,pre);
  return root;
}

BinaryTreeNode<int>* buildTree(int *preorder, int preLenght, int *inorder, int inLength)
{
  
  BinaryTreeNode<int> *root=buildTreeHelper(preorder,inorder,0,0,preLenght-1,inLength-1);
  return root;
    
}
